import java.io.*;
import java.util.*;
public class LineUp 
{
    static void heapPermutation(String[] a, int size, int n, ArrayList<ArrayList<String>> x) 
    { 
    	//https://www.geeksforgeeks.org/heaps-algorithm-for-generating-permutations/ 
    	//That is where I got the idea from, but I changed the algorithm to work for this purpose
    	int count = 0;
        if (size == 1) 
        {
        	ArrayList<String> m = new ArrayList<String>();
        	for(int i = 0; i < a.length; i ++)
        	{
        		m.add(a[i]);
        	}
        	ArrayList<String> f = new ArrayList<String>(m);
            x.add(f);
            m.clear();
        }
        for (int i=0; i<size; i++) 
        { 
            heapPermutation(a, size-1, n, x); 
            if (size % 2 == 1) 
            { 
                String temp = a[0]; 
                a[0] = a[size-1]; 
                a[size-1] = temp; 
            } 
            else
            { 
                String temp = a[i]; 
                a[i] = a[size-1]; 
                a[size-1] = temp; 
            } 
        } 
    } 
	public static void main(String[] args) throws IOException
	{
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("lineup.out")));
		BufferedReader f = new BufferedReader(new FileReader("lineup.in"));
		StringTokenizer st = new StringTokenizer(f.readLine());
		int n = Integer.parseInt(st.nextToken());
		String[][] x = new String[n][2];
		for(int i = 0; i < n; i ++)
		{
			st = new StringTokenizer(f.readLine());
			x[i][0] = st.nextToken();
			st.nextToken();
			st.nextToken();
			st.nextToken();
			st.nextToken();
			x[i][1] = st.nextToken();
		}
		String[] cows = {"Beatrice","Sue","Buttercup","Blue","Bella","Bessie","Belinda","Betsy"};
		ArrayList<ArrayList<String>> test = new ArrayList<ArrayList<String>>();
		LineUp.heapPermutation(cows,cows.length,cows.length,test);	
		int num = 0;
		String[][] perm = new String[test.size()][8];
		for(int i = 0; i < test.size(); i ++)
		{
			for(int j = 0; j < test.get(i).size(); j ++)
			{
				perm[i][j] = test.get(i).get(j);
			}
		}
		boolean done = true;
		ArrayList<String[]> more = new ArrayList<String[]>();
		boolean tester = false;
		boolean tester2 = false;
		outer : for(int i = 0; i < perm.length; i ++)
		{
			for(int j = 0; j < n; j ++)
			{
				done = true;
				for(int k = 0; k < perm[i].length; k ++)
				{
					if(k < perm[i].length - 1)
					{
						tester2 = true;
					}
					if(k >= 1)
					{
						tester = true;
					}
					if((x[j][0].equals(perm[i][k]) && ((tester2 && x[j][1].equals(perm[i][k+1])) || (tester && x[j][1].equals(perm[i][k-1])))))
					{
						done = false;
					}
					tester = false;
					tester2 = false;
				}
				if(done)
				{
					continue outer;
				}
			}
			if(!done)
			{
				more.add(perm[i]);
			}
		}
		int count = 0;
		String min = "";
		String check = "ZZZZZZZZZZZZZZZZZ";
		for(int i = 0; i < more.size(); i ++)
		{
			for(int j = 0; j < more.get(i).length; j ++)
			{
				min += more.get(i)[j];
			}
			if(min.compareTo(check) < 0)
			{
				check = min;
			}
			min = "";
		}
		ArrayList<Integer> o = new ArrayList<Integer>();
		for(int i = 0; i < check.length(); i ++)
		{
			if(Character.isUpperCase(check.charAt(i)))
			{
				o.add(i);
			}
		}
		for(int i = 0; i < 8; i ++)
		{
			if(i!= 7)
				out.println(check.substring(o.get(i), o.get(i+ 1)));
			else
				out.println(check.substring(o.get(i)));
		}
		out.close();
	}
}
