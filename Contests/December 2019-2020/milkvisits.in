import java.io.*;
import java.util.*;
public class Trees2 
{
	public static void main(String[] args) throws IOException
	{
		Map<Integer, Integer> component = new HashMap<>();
		BufferedReader f = new BufferedReader(new FileReader("milkvisits.in"));
		StringTokenizer st = new StringTokenizer(f.readLine());
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("milkvisits.out")));
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		Map<Integer,Set<Integer>> farm = new HashMap<>();
		Map<Integer, Character> type = new HashMap<>();
		st = new StringTokenizer(f.readLine());
		String milk = st.nextToken();
		for(int k = 1; k <= n; k ++)
		{
			type.put(k, milk.charAt(k-1));
			farm.put(k, new TreeSet<>());
		}
		for(int k = 1; k <= n - 1; k ++)
		{
			st = new StringTokenizer(f.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			farm.get(a).add(b);
			farm.get(b).add(a);
		}
		boolean[] visited = new boolean[n+1];
		visited[1] = true;
		Map<Integer,Integer> parent = new HashMap<>();
		Map<Integer,Integer> level = new HashMap<>();
		parent.put(1, 0);
		dfs(1, farm, type, visited, level, 1, parent);
		visited = new boolean[n+1];
		visited[1] = true;
		dfs2(1 , farm,  type,parent,component, visited);
		/*for(int i : component.keySet())
		{
			System.out.println( i + " " + component.get(i));
		}*/
		//System.out.println(component);
		//System.out.println(parent);
		StringBuilder res = new StringBuilder("");
	for(int j = 1; j <= m; j ++)
		{
			st = new StringTokenizer(f.readLine());
			int p = Integer.parseInt(st.nextToken());
			int q = Integer.parseInt(st.nextToken());
			char s = st.nextToken().charAt(0);
			//res.append(query(p,q,s,type,level, parent));
			int d;
			if(type.get(p) != type.get(q))
			{
				d = 1;
			}
			else
			{
				if(component.get(p) == component.get(q))
				{
					if(type.get(p) == s)
					{
						d = 1;
					}
					else
					{
						d = 0;
					}
				}
				else // types are equal but in different components --> there must be one node with a different
					// type that is intersecting
				{
					d = 1;
				}
			}
			res.append(""+d);
		} 
		out.println(res.toString());
		out.close(); 
	}
	/*public static int query(int p, int q, char s, Map<Integer,Character> type, Map<Integer,Integer> level, 
			Map<Integer,Integer> parent)
	{
		if(type.get(p) == s || type.get(q) == s)
			return 1;
		while(level.get(p) > level.get(q))
		{
			p = parent.get(p);
			if(type.get(p) == s)
				return 1;
		}
		while(level.get(p) < level.get(q))
		{
			q = parent.get(q);
			if(type.get(q) == s)
				return 1;
		}
		while(p!=q)
		{
			q = parent.get(q);
			p = parent.get(p);
			if(type.get(q) == s || type.get(p) == s)
				return 1;
		}
		return 0;
	}*/
	public static void dfs(int current , Map<Integer,Set<Integer>> farm, Map<Integer, Character> type, boolean[] visited,
			Map<Integer,Integer> level, int k, Map<Integer,Integer> parent)
	{
		level.put(current, k);
		/*System.out.println(current + " " + type.get(current) + " " + level.get(current) + " " 
		+ parent.get(current) + " " );*/
		for(int neighbor : farm.get(current))
		{
			if(!visited[neighbor])
			{
				visited[neighbor] = true;
				parent.put(neighbor, current);
				dfs(neighbor, farm, type, visited,level, k+1, parent);
			}	
		}
	}
	public static void dfs2(int current , Map<Integer,Set<Integer>> farm, Map<Integer, Character> type,
			Map<Integer,Integer> parent, Map<Integer,Integer> component, boolean[] visited)
	{
		int parentID = parent.get(current);
		if(current == 1)
			component.put(1, 1);
		else 
		{
			if(type.get(current) == type.get(parentID))
				component.put(current, component.get(parentID));
			else
			{
				component.put(current,current);
			}
		}
		for(int neighbor : farm.get(current))
		{
			if(!visited[neighbor])
			{
				visited[neighbor] = true;
				dfs2(neighbor, farm, type, parent,component, visited);
			}	
		}
	}
}
		
		
		
